package com.clothy.myapp.domain;

import static com.clothy.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CartItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartItemAllPropertiesEquals(CartItem expected, CartItem actual) {
        assertCartItemAutoGeneratedPropertiesEquals(expected, actual);
        assertCartItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartItemAllUpdatablePropertiesEquals(CartItem expected, CartItem actual) {
        assertCartItemUpdatableFieldsEquals(expected, actual);
        assertCartItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartItemAutoGeneratedPropertiesEquals(CartItem expected, CartItem actual) {
        assertThat(actual)
            .as("Verify CartItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartItemUpdatableFieldsEquals(CartItem expected, CartItem actual) {
        assertThat(actual)
            .as("Verify CartItem relevant properties")
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getLineTotal()).as("check lineTotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getLineTotal())
            )
            .satisfies(a -> assertThat(a.getIsInOrder()).as("check isInOrder").isEqualTo(expected.getIsInOrder()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartItemUpdatableRelationshipsEquals(CartItem expected, CartItem actual) {
        assertThat(actual)
            .as("Verify CartItem relationships")
            .satisfies(a -> assertThat(a.getCart()).as("check cart").isEqualTo(expected.getCart()))
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getCustomerOrder()).as("check customerOrder").isEqualTo(expected.getCustomerOrder()));
    }
}
