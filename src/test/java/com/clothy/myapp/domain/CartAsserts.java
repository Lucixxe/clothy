package com.clothy.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CartAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartAllPropertiesEquals(Cart expected, Cart actual) {
        assertCartAutoGeneratedPropertiesEquals(expected, actual);
        assertCartAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartAllUpdatablePropertiesEquals(Cart expected, Cart actual) {
        assertCartUpdatableFieldsEquals(expected, actual);
        assertCartUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartAutoGeneratedPropertiesEquals(Cart expected, Cart actual) {
        assertThat(actual)
            .as("Verify Cart auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartUpdatableFieldsEquals(Cart expected, Cart actual) {
        assertThat(actual)
            .as("Verify Cart relevant properties")
            .satisfies(a -> assertThat(a.getCartKey()).as("check cartKey").isEqualTo(expected.getCartKey()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getIsCheckedOut()).as("check isCheckedOut").isEqualTo(expected.getIsCheckedOut()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartUpdatableRelationshipsEquals(Cart expected, Cart actual) {
        assertThat(actual)
            .as("Verify Cart relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
