package com.clothy.myapp.domain;

import static com.clothy.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CustomerOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerOrderAllPropertiesEquals(CustomerOrder expected, CustomerOrder actual) {
        assertCustomerOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomerOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerOrderAllUpdatablePropertiesEquals(CustomerOrder expected, CustomerOrder actual) {
        assertCustomerOrderUpdatableFieldsEquals(expected, actual);
        assertCustomerOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerOrderAutoGeneratedPropertiesEquals(CustomerOrder expected, CustomerOrder actual) {
        assertThat(actual)
            .as("Verify CustomerOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerOrderUpdatableFieldsEquals(CustomerOrder expected, CustomerOrder actual) {
        assertThat(actual)
            .as("Verify CustomerOrder relevant properties")
            .satisfies(a -> assertThat(a.getOrderNumber()).as("check orderNumber").isEqualTo(expected.getOrderNumber()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerOrderUpdatableRelationshipsEquals(CustomerOrder expected, CustomerOrder actual) {
        assertThat(actual)
            .as("Verify CustomerOrder relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getShippingAddress()).as("check shippingAddress").isEqualTo(expected.getShippingAddress()));
    }
}
